name: CI

# On every pull request, but only on push to master
on:
  push:
    branches:
    - main
    tags:
    - '*'
  pull_request:

jobs:
  tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {name: Windows, python: '3.13', os: windows-2019}
          - {name: Mac, python: '3.13', os: macos-latest}
          - {name: 'Ubuntu', python: '3.13', os: ubuntu-latest}
          - {name: '3.13', python: '3.13', os: ubuntu-latest}
          - {name: '3.12', python: '3.12', os: ubuntu-latest}
          - {name: '3.11', python: '3.11', os: ubuntu-latest}
          - {name: '3.10', python: '3.10', os: ubuntu-latest}
          - {name: '3.9', python: '3.9', os: ubuntu-latest}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install numpy -U --no-binary numpy
          python -m pip install -e .["test"]

      - name: Run pre-commit
        if: ${{ matrix.name == 'Ubuntu' }}
        run: |
          python -m pip install pre-commit
          pre-commit run --all-files

      - name: Run Tests
        run: |
          python -m pytest --cov color_operations --cov-report xml --cov-report term-missing

      - name: Upload Results
        if: ${{ matrix.name == 'Ubuntu' }}
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          flags: unittests
          name: ${{ matrix.python }}
          fail_ci_if_error: false

  source_distribution:
    if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
    needs:
      - tests
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install build

      - name: Build a source tarball
        run: python -m build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/*.tar.gz

  wheels:
    if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
    needs:
      - tests
    name: Build wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-2019, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - uses: pypa/cibuildwheel@v2.23.2
        env:
          # https://github.com/mapbox/rio-color/blob/0ab59ad8e2db99ad1d0c8bd8c2e4cf8d0c3114cf/appveyor.yml#L3
          CIBW_SKIP: 'cp27* cp35* pp* *-win32 *-manylinux_i686 *musllinux*'
          CIBW_ARCHS_MACOS: x86_64 arm64 universal2
          CIBW_ARCHS_LINUX: auto aarch64
          # CIBW_TEST_REQUIRES: pytest colormath==2.0.2
          # CIBW_TEST_COMMAND: python -m pytest {project}/tests

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  publish-to-pypi:
    if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
    needs:
      - source_distribution
      - wheels
    name: Upload Source and Wheels to Pypi
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/color-operations
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
      - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""

      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'

